{"ast":null,"code":"var _jsxFileName = \"/Users/luksuz/Desktop/seminarski fitness app/client/src/components/ChatBot.js\",\n  _s = $RefreshSig$();\nimport \"./chatBot.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport getChatBotResponse from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messagesHistory, setMessagesHistory] = useState([{\n    role: \"system\",\n    content: `You will be impersonating ronnie coleman and asking the user about his training preferences.\n                                  You will have to figure out the users maintanance calories, goal(cut/bulk),\n                                  cut/bulk rate(kg/week), workout experience and health issues.\n                                  you have to convert the users responses to fit the model below eg. 'i want to gain weight' -> 'bulk',\n                                  'i sometimes have a strong pinching feeling in my lower back' -> 'lower back pain',\n                                  'i have a little bit of workout experience' -> 'beginner',\n                                  if the user starts some other topic, just get back to the main topic(fitness).\n                                  Once you have all this data,dont say anything else, rather end the conversation exactly like this:\n                                  Thats it, i got all the information i need to create your program, these are your preferences:\n                                  Maintanance calories: \n                                  Goal: (bulk/cut/mantain)    \n                                  Cut/bulk rate: (kg/week)\n                                  Workout experience: \n                                  Health issues: `\n  }, {\n    role: \"assistant\",\n    content: \"Hello!, I am Ronnie Coleman, the greatest bodybuilder of all time, i guess you are here for some fitness advices,tell me more about yourself?\"\n  }]);\n  const conversationEndRef = useRef(null);\n  const handleInputChange = e => {\n    setCurrentMessage(e.target.value);\n  };\n  const handleSendClick = () => {\n    if (currentMessage.trim() !== \"\") {\n      setMessagesHistory([...messagesHistory, {\n        role: \"user\",\n        content: currentMessage\n      }]);\n    }\n  };\n  useEffect(() => {\n    if (conversationEndRef.current) {\n      conversationEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n    getChatBotResponse(messagesHistory, setMessagesHistory);\n    setCurrentMessage(\"\");\n  }, [messagesHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex flex-column h-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"p-3 rounded-bottom bg-success\",\n        children: \"Coach Greg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 conversation-container\",\n        children: [messagesHistory.map((message, index) => index > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `row ${message.role === \"user bg-secondary\" ? \"text-end\" : \"bg-success\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: conversationEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group p-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          \"aria-label\": \"Send\",\n          value: currentMessage,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group-append\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            type: \"button\",\n            onClick: handleSendClick,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"rQ17JsWVQPEgS+IV4uoUhcJtP68=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["useState","useEffect","useRef","getChatBotResponse","jsxDEV","_jsxDEV","ChatBot","_s","currentMessage","setCurrentMessage","messagesHistory","setMessagesHistory","role","content","conversationEndRef","handleInputChange","e","target","value","handleSendClick","trim","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onChange","type","onClick","_c","$RefreshReg$"],"sources":["/Users/luksuz/Desktop/seminarski fitness app/client/src/components/ChatBot.js"],"sourcesContent":["import \"./chatBot.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport getChatBotResponse from \"../api\";\n\nfunction ChatBot() {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messagesHistory, setMessagesHistory] = useState([\n    {role: \"system\", content: `You will be impersonating ronnie coleman and asking the user about his training preferences.\n                                  You will have to figure out the users maintanance calories, goal(cut/bulk),\n                                  cut/bulk rate(kg/week), workout experience and health issues.\n                                  you have to convert the users responses to fit the model below eg. 'i want to gain weight' -> 'bulk',\n                                  'i sometimes have a strong pinching feeling in my lower back' -> 'lower back pain',\n                                  'i have a little bit of workout experience' -> 'beginner',\n                                  if the user starts some other topic, just get back to the main topic(fitness).\n                                  Once you have all this data,dont say anything else, rather end the conversation exactly like this:\n                                  Thats it, i got all the information i need to create your program, these are your preferences:\n                                  Maintanance calories: \n                                  Goal: (bulk/cut/mantain)    \n                                  Cut/bulk rate: (kg/week)\n                                  Workout experience: \n                                  Health issues: `\n\n     },\n    {role: \"assistant\", content: \"Hello!, I am Ronnie Coleman, the greatest bodybuilder of all time, i guess you are here for some fitness advices,tell me more about yourself?\"},\n  ]);\n\n  const conversationEndRef = useRef(null);\n\n  const handleInputChange = (e) => {\n    setCurrentMessage(e.target.value);\n  };\n\n  const handleSendClick = () => {\n    if (currentMessage.trim() !== \"\") {\n      setMessagesHistory([...messagesHistory, { role: \"user\", content: currentMessage }]);\n    }\n  };\n\n  useEffect(() => {\n    if (conversationEndRef.current) {\n        conversationEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n    getChatBotResponse(messagesHistory, setMessagesHistory)\n    setCurrentMessage(\"\");\n}, [messagesHistory]);\n\n  return (\n    <div className=\"d-flex flex-column h-100\">\n      <div className=\"row mb-auto\">\n        <h1 className=\"p-3 rounded-bottom bg-success\">\n          Coach Greg\n        </h1>\n\n        <div className=\"flex-grow-1 conversation-container\">\n        {messagesHistory.map((message, index) => (\n          index > 1 &&\n            <div key={index} className={`row ${message.role === \"user bg-secondary\" ? \"text-end\" : \"bg-success\"}`}>\n              <p>{message.content}</p>\n            </div>\n          ))}\n          <div ref={conversationEndRef}></div>\n\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"input-group p-2\">\n          <textarea className=\"form-control\" aria-label=\"Send\" value={currentMessage} onChange={handleInputChange}></textarea>\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-success\" type=\"button\" onClick={handleSendClick}>\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}